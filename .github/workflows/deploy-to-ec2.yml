name: Deploy Hello World to EC2

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  REGISTRY: docker.io
  IMAGE_NAME: hello-world-spring

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Run tests
      run: ./mvnw clean test

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Build application
      run: ./mvnw clean package -DskipTests

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push Docker image
      env:
        IMAGE_TAG: ${{ github.sha }}
        FULL_IMAGE_NAME: ${{ env.REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}
      run: |
        docker build -t ${{ env.FULL_IMAGE_NAME }}:${{ env.IMAGE_TAG }} .
        docker build -t ${{ env.FULL_IMAGE_NAME }}:latest .
        docker push ${{ env.FULL_IMAGE_NAME }}:${{ env.IMAGE_TAG }}
        docker push ${{ env.FULL_IMAGE_NAME }}:latest

    - name: Deploy to EC2
      uses: appleboy/ssh-action@v1.0.0
      env:
        FULL_IMAGE_NAME: ${{ env.REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}
        DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        port: 22
        envs: FULL_IMAGE_NAME,DOCKERHUB_USERNAME
        script: |
          echo "üöÄ Starting deployment..."
          echo "Using image: $FULL_IMAGE_NAME"
          
          # Stop and remove existing container
          echo "Stopping existing container..."
          docker stop hello-world-app 2>/dev/null || echo "No existing container to stop"
          docker rm hello-world-app 2>/dev/null || echo "No existing container to remove"
          
          # Remove old images (safer approach)
          echo "Cleaning up old images..."
          docker images --format "{{.Repository}}:{{.Tag}}" | grep "$DOCKERHUB_USERNAME/hello-world-spring" | xargs -r docker rmi 2>/dev/null || echo "No old images to remove"
          
          # Pull latest image
          echo "Pulling latest image..."
          if ! docker pull $FULL_IMAGE_NAME:latest; then
            echo "‚ùå Failed to pull Docker image"
            exit 1
          fi
          
          # Run new container
          echo "Starting new container..."
          if ! docker run -d \
            --name hello-world-app \
            --restart unless-stopped \
            -p 8080:8080 \
            -e SPRING_PROFILES_ACTIVE=aws \
            -e DB_HOST=recommendation-db.c1u0u8kyo3n8.us-west-2.rds.amazonaws.com \
            -e DB_PORT=3306 \
            -e DB_NAME=recommendation_db \
            -e DB_USERNAME=admin \
            -e DB_PASSWORD="${{ secrets.DB_PASSWORD }}" \
            -e JWT_SECRET="${{ secrets.JWT_SECRET }}" \
            -e JWT_EXPIRATION=3600 \
            $FULL_IMAGE_NAME:latest; then
            echo "‚ùå Failed to start container"
            exit 1
          fi
          
          # Wait for application to start and verify it's running
          echo "Waiting for application to start..."
          sleep 10
          
          # Check if container is running
          if ! docker ps | grep hello-world-app; then
            echo "‚ùå Container is not running"
            docker logs hello-world-app
            exit 1
          fi
          
          # Wait a bit more for the application to fully start
          sleep 20
          
          # Verify deployment with health check
          echo "Verifying deployment..."
          max_attempts=2
          attempt=1
          
          while [ $attempt -le $max_attempts ]; do
            echo "Health check attempt $attempt/$max_attempts"
            
            # Try different endpoints - adjust based on your Spring Boot app
            if curl -f -s http://localhost:8080/hello >/dev/null 2>&1; then
              echo "‚úÖ Application is responding at /hello endpoint"
              break
            elif curl -f -s http://localhost:8080/actuator/health >/dev/null 2>&1; then
              echo "‚úÖ Application is responding at /actuator/health endpoint"
              break
            elif curl -f -s http://localhost:8080/ >/dev/null 2>&1; then
              echo "‚úÖ Application is responding at root endpoint"
              break
            else
              echo "‚è≥ Application not ready yet, waiting..."
              sleep 10
              attempt=$((attempt + 1))
            fi
          done
          
          if [ $attempt -gt $max_attempts ]; then
            echo "‚ùå Deployment verification failed after $max_attempts attempts"
            echo "Container logs:"
            docker logs hello-world-app --tail 50
            echo "Container status:"
            docker ps -a | grep hello-world-app
            exit 1
          fi
          
          echo "‚úÖ Deployment successful!"

    - name: Notify deployment status
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "üöÄ Deployment to EC2 completed successfully!"
          echo "üåê Application should be available at: http://${{ secrets.EC2_HOST }}:8080"
          echo "üìã Try these endpoints:"
          echo "   - http://${{ secrets.EC2_HOST }}:8080/hello"
          echo "   - http://${{ secrets.EC2_HOST }}:8080/actuator/health"
          echo "   - http://${{ secrets.EC2_HOST }}:8080/"
        else
          echo "‚ùå Deployment failed! Check the logs above for details."
        fi